version: '3.8'

services:
  backend:
    environment:
      SPRING_PROFILES_ACTIVE: docker,prod
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate  # En producción solo validamos
      SPRING_JPA_SHOW_SQL: false  # En producción no mostramos SQL
      SPRING_FLYWAY_ENABLED: true
      # Configuración de producción
      SERVER_TOMCAT_MAX_THREADS: 200
      SERVER_TOMCAT_MIN_SPARE_THREADS: 10
      SERVER_TOMCAT_ACCEPT_COUNT: 100
    # En producción, usamos el JAR compilado
    command: java -Xmx1g -Xms512m -jar app.jar
    restart: always
    # Health checks más robustos para producción
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # En producción, limitamos recursos
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres:
    # En producción, usamos una imagen más estable
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lubricentro_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    # En producción, configuramos volúmenes persistentes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup  # Para backups
    # Configuración de producción para PostgreSQL
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lubricentro_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
